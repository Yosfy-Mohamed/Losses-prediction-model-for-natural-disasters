import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import seaborn as sns
from google.colab import drive
drive.mount('/content/drive')
try:
  data = pd.read_csv('/content/drive/MyDrive/Project data/Natural disasters dataset.csv', encoding='utf-8')
except UnicodeDecodeError:
  with open('/content/drive/MyDrive/Project data/Natural disasters dataset.csv', encoding='utf-8' , errors='ignore') as f:
    data = pd.read_csv(f)


data.isnull().sum()
data = data.dropna(axis=0, subset=["Total Damage, Adjusted ('000 US$)"])


Q1 = data["Total Damage, Adjusted ('000 US$)"].quantile(0.25)
Q3 = data["Total Damage, Adjusted ('000 US$)"].quantile(0.75)
IQR = Q3 - Q1

# Define the lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Show outliers (values outside the bounds)
outliers = data[(data["Total Damage, Adjusted ('000 US$)"] < lower_bound) | (data["Total Damage, Adjusted ('000 US$)"] > upper_bound)]
#print("Outliers:", outliers)

# Remove outliers
data_cleaned = data[(data["Total Damage, Adjusted ('000 US$)"] >= lower_bound) & (data["Total Damage, Adjusted ('000 US$)"] <= upper_bound)]
#print(data_cleaned)

x = data_cleaned[['Start Year', 'Disaster Type' , 'Disaster Subtype' , "Total Damage ('000 US$)" , "CPI"]]
y = data_cleaned["Total Damage, Adjusted ('000 US$)"]


# One-Hot encoding
ED = OneHotEncoder(sparse_output = True).fit_transform(x)
ED_train, ED_test, y_train, y_test = train_test_split(ED, y, train_size = 0.8 , test_size=0.2 , random_state=42)


# Model ftiitng and prediction
model = RandomForestRegressor(random_state=42)
model.fit(ED_train, y_train)
y_pred = model.predict(ED_test)


# Graphs to be able to visualize difference between predicted and actual data
plt.scatter(y_test, y_pred)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.show()
sns.pairplot(data_cleaned[['Disaster Type', 'Disaster Subtype', 'Total Damage, Adjusted (\'000 US$)']])


# Statistical analysis
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
std_dev = np.std(data_cleaned['Total Damage, Adjusted (\'000 US$)'])



print("Mean absolute error:" , mae)
print("Mean squared error:" , mse)
print("R2 score:" , r2)
print('Standard Deviation:' , std_dev)





# Define preprocessing for categorical and numerical features
categorical_features = ['Disaster Type', 'Disaster Subtype']
numerical_features = ['Start Year', "Total Damage ('000 US$)" , "CPI"]

# Create a ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_features),
        ('num', 'passthrough', numerical_features)
    ])

# Create a pipeline with preprocessing and model
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('model', RandomForestRegressor(random_state=42))])

# Train the model
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, random_state=42)
pipeline.fit(x_train, y_train)


# Prompt the user to input data to be predicted
try:
  sy = int(input('Enter the start year:'))
  if sy >=2024:
    print("Enter a suitable year(<2024).")
    exit()
except ValueError:
  print("Invalid, please enter a valid year as an integer")

dt = input("Enter the disater type:")
dst = input('Enter the disaster subtype:')
td = float(input('Enter the total damage(In USD):'))


# Creating dataframe
user_input = pd.DataFrame({
    'Start Year':[sy],
    'Disaster Type':[dt],
    'Disaster Subtype':[dst],
    "Total Damage ('000 US$)":[td]
})


  Prediction = pipeline.predict(user_input)
  print('Predicted adjusted damage in USD:' , Prediction)

#mse = mean_squared_error(y_test, Prediction)
#mae = mean_absolute_error(y_test, Prediction)
#r2 = r2_score(y_test, Prediction)

#print("Mean Saquared Error:" , mse)
#print("Mean Absolute Error" , mae)
#print("R2 Score:" , r2)
